-- vim: fdm=marker ft=lua

-- {{{ Requires
-- Standard awesome library
local gears = require("gears")
local awful = require("awful")
require("awful.autofocus")

-- Widget and layout library
local wibox = require("wibox")

-- Theme handling library
local beautiful = require("beautiful")

-- Notification library
local naughty = require("naughty")
naughty.config.defaults["icon_size"] = 32 -- Default icon size for notifications

-- Menubar library
local menubar = require("menubar")

-- Hotkeys popup library
local hotkeys_popup = require("awful.hotkeys_popup")
-- Enable hotkeys help widget for VIM and other apps
-- when client with a matching name is opened:
require("awful.hotkeys_popup.keys")

-- Remember window positions (client positions)
-- package.path = package.path .. ";/usr/share/lua/5.4/?.lua;/usr/share/lua/5.4/?/init.lua"
-- local json = require("dkjson")
-- local posfile = gears.filesystem.get_cache_dir() .. "client_positions.json"

-- Path to the configuration directory
local config_path = awful.util.getdir("config") .. "/"
-- }}}

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then naughty.notify({
	preset = naughty.config.presets.critical,
	title = "Oops, there were errors during startup!",
	text = awesome.startup_errors,
}) end

-- Handle runtime errors after startup
do
	local in_error = false
	awesome.connect_signal("debug::error", function(err)
		-- Make sure we don't go into an endless error loop
		if in_error then return end
		in_error = true

		naughty.notify({
			preset = naughty.config.presets.critical,
			title = "Oops, an error happened!",
			text = tostring(err),
		})
		in_error = false
	end)
end
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, font and wallpapers.
beautiful.init("~/.config/awesome/theme.lua")

-- Set default terminal and editor commands
local home = os.getenv("HOME")
terminal = home .. "/.local/launchers/launch-terminal.sh"
discord = home .. "/.local/launchers/launch-discord.sh"
launchtool = home .. "/.local/launchers/launch-launcher.sh"
browser = home .. "/.local/launchers/launch-browser.sh"
filemanager = home .. "/.local/launchers/launch-filemanager.sh"
color = home .. "/.bin/color.sh"
editor = os.getenv("EDITOR") or "nano"
editor_cmd = terminal .. " " .. editor
suspend_cmd = "systemctl suspend"

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Load custom layout configuration
dofile(config_path .. "layout.lua")
-- }}}

-- {{{ Menu
-- Create a launcher widget and a main menu
myawesomemenu = {
	{ "hotkeys", function() hotkeys_popup.show_help(nil, awful.screen.focused()) end },
	{ "manual", terminal .. " -e man awesome" },
	{ "edit config", editor_cmd .. " " .. awesome.conffile },
	{ "restart", awesome.restart },
	{ "quit", function() awesome.quit() end },
}

mymainmenu = awful.menu({
	items = {
		{ "awesome", myawesomemenu, beautiful.awesome_icon },
		{ "launcher", launchtool },
		{ "open terminal", terminal },
		{ "open browser", browser },
		{ "suspend", suspend_cmd },
	},
})

mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon, menu = mymainmenu })

-- Menubar configuration
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
-- }}}

-- {{{ Wibar
-- Widgets
mytextclock = wibox.widget.textclock(" %a %Y-%m-%d %-I:%M %p ")

-- Create a wibox for each screen and add it
local taglist_buttons = gears.table.join(
	awful.button({}, 1, function(t) t:view_only() end),
	awful.button({ modkey }, 1, function(t)
		if client.focus then client.focus:move_to_tag(t) end
	end),
	awful.button({}, 3, awful.tag.viewtoggle),
	awful.button({ modkey }, 3, function(t)
		if client.focus then client.focus:toggle_tag(t) end
	end),
	awful.button({}, 4, function(t) awful.tag.viewnext(t.screen) end),
	awful.button({}, 5, function(t) awful.tag.viewprev(t.screen) end)
)

local tasklist_buttons = gears.table.join(
	awful.button({}, 1, function(c)
		if c == client.focus then
			c.minimized = true
		else
			c:emit_signal("request::activate", "tasklist", { raise = true })
		end
	end),
	awful.button({}, 3, function() awful.menu.client_list({ theme = { width = 250 } }) end),
	awful.button({}, 4, function() awful.client.focus.byidx(1) end),
	awful.button({}, 5, function() awful.client.focus.byidx(-1) end)
)

local function set_wallpaper(s)
	-- Wallpaper
	if beautiful.wallpaper then
		local wallpaper = beautiful.wallpaper
		-- If wallpaper is a function, call it with the screen
		if type(wallpaper) == "function" then wallpaper = wallpaper(s) end
		gears.wallpaper.maximized(wallpaper, s, true)
	end
end

-- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
screen.connect_signal("property::geometry", set_wallpaper)

awful.screen.connect_for_each_screen(function(s)
	-- Wallpaper
	set_wallpaper(s)

	-- Each screen has its own tag table.
	awful.tag({ "  1  ", "  2  ", "  3  ", "  4  ", "  5  ", "  6  ", "  7  ", "  8  ", "  9  " }, s, awful.layout.layouts[1])

	-- Create a promptbox for each screen
	s.mypromptbox = awful.widget.prompt()
	-- Create an imagebox widget which will contain an icon indicating which layout we're using.
	-- We need one layoutbox per screen.
	s.mylayoutbox = awful.widget.layoutbox(s)
	s.mylayoutbox:buttons(gears.table.join(awful.button({}, 1, function() awful.layout.inc(1) end), awful.button({}, 3, function() awful.layout.inc(-1) end), awful.button({}, 4, function() awful.layout.inc(1) end), awful.button({}, 5, function() awful.layout.inc(-1) end)))
	-- Create a taglist widget
	s.mytaglist = awful.widget.taglist({
		screen = s,
		filter = awful.widget.taglist.filter.all,
		buttons = taglist_buttons,
	})

	-- Create a tasklist widget
	s.mytasklist = awful.widget.tasklist({
		screen = s,
		filter = awful.widget.tasklist.filter.currenttags,
		buttons = tasklist_buttons,
	})

	-- Create the wibox
	s.mywibox = awful.wibar({ position = "top", screen = s })

	s.mywibox:setup({
		layout = wibox.layout.align.horizontal,
		{ -- Left widgets
			layout = wibox.layout.fixed.horizontal,
			mylauncher,
			s.mytaglist,
			s.mypromptbox,
		},
		s.mytasklist, -- Middle widget
		{ -- Right widgets
			layout = wibox.layout.fixed.horizontal,
			-- mykeyboardlayout,
			wibox.widget.systray(),
			mytextclock,
			s.mylayoutbox,
		},
	})
end)
-- }}}

-- {{{ Mouse bindings
-- root.buttons(gears.table.join(awful.button({}, 3, function() mymainmenu:toggle() end), awful.button({}, 4, awful.tag.viewnext), awful.button({}, 5, awful.tag.viewprev)))
-- }}}

-- {{{ Key bindings
-- GLOBAL KEYS
globalkeys = gears.table.join(

	-- AWESOME
	awful.key({ modkey }, "s", hotkeys_popup.show_help, { description = "show help", group = "awesome: awesome" }),
	awful.key({ modkey, "Shift" }, "r", awesome.restart, { description = "reload awesome", group = "awesome: awesome" }),

	-- LAYOUT
	awful.key({ modkey }, "h", function() awful.tag.incmwfact(0.05) end, { description = "increase master width factor", group = "awesome: layout" }),
	awful.key({ modkey }, "l", function() awful.tag.incmwfact(-0.05) end, { description = "decrease master width factor", group = "awesome: layout" }),
	awful.key({ modkey }, "space", function() awful.layout.inc(1) end, { description = "select next layout", group = "awesome: layout" }),
	awful.key({ modkey, "Shift" }, "space", function() awful.layout.inc(-1) end, { description = "select previous layout", group = "awesome: layout" }),

	-- TAG
	awful.key({ modkey, "Control" }, "Left", awful.tag.viewprev, { description = "view previous tag", group = "awesome: tag" }),
	awful.key({ modkey, "Control" }, "Right", awful.tag.viewnext, { description = "view next tag", group = "awesome: tag" }),

	-- CLIENT FOCUS
	awful.key({ modkey }, "Tab", function()
		awful.client.focus.history.previous()
		if client.focus then client.focus:raise() end
	end, { description = "cycle back through client history", group = "awesome: client" }),

	-- SCREEN
	awful.key({}, "XF86MonBrightnessUp", function() awful.spawn("light -A 10") end, { description = "increase brightness", group = "awesome: screen" }),
	awful.key({}, "XF86MonBrightnessDown", function() awful.spawn("light -U 10") end, { description = "decrease brightness", group = "awesome: screen" }),

	-- LAUNCHER (GUI)
	awful.key({ modkey }, "n", function() awful.spawn("obsidian") end, { description = "Obsidian", group = "awesome: launcher (gui)" }),
	awful.key({ modkey, "Shift" }, "c", function() awful.spawn(color) end, { description = "Color picker", group = "awesome: launcher (gui)" }),
	awful.key({ modkey, "Shift" }, "q", function() awful.spawn("qutebrowser") end, { description = "qutebrowser", group = "awesome: launcher (gui)" }),
	awful.key({ modkey }, "u", function() awful.spawn("slack") end, { description = "Slack", group = "awesome: launcher (gui)" }),
	awful.key({ modkey }, "t", function() awful.spawn(terminal) end, { description = "Default terminal", group = "awesome: launcher (gui)" }),
	awful.key({ modkey }, "w", function() awful.spawn(browser) end, { description = "Default browser", group = "awesome: launcher (gui)" }),
	awful.key({ modkey }, "e", function() awful.spawn(filemanager) end, { description = "File manager", group = "awesome: launcher (gui)" }),
	awful.key({ modkey }, "d", function() awful.spawn.raise_or_spawn(discord) end, { description = "Discord", group = "awesome: launcher (gui)" }),
	awful.key({ modkey }, "g", function() awful.spawn("google-chrome-stable") end, { description = "Chrome", group = "awesome: launcher (gui)" }),
	awful.key({ modkey }, "m", function() awful.spawn("spotify") end, { description = "Spotify", group = "awesome: launcher (gui)" }),

	-- LAUNCHER (CLI)
	awful.key({ modkey }, "c", function() awful.spawn(terminal .. " numbat") end, { description = "calculator", group = "awesome: launcher (cli)" }),
	awful.key({ modkey }, "v", function() awful.spawn(terminal .. " pulsemixer") end, { description = "pulsemixer", group = "awesome: launcher (cli)" }),
	awful.key({ modkey }, "b", function() awful.spawn(terminal .. " btop") end, { description = "btop", group = "awesome: launcher (cli)" }),

	-- MISC
	awful.key({}, "Print", function() awful.spawn("flameshot gui") end, { description = "take a screenshot", group = "awesome: misc" }),
	awful.key({ modkey }, "r", function() awful.spawn(launchtool) end, { description = "open rlaunch", group = "awesome: misc" }),
	awful.key({ modkey }, "p", function() menubar.show() end, { description = "show the menubar", group = "awesome: misc" })
)

-- CLIENT KEYS
clientkeys = gears.table.join(
	awful.key({ modkey, "Shift" }, "f", function(c)
		c.fullscreen = not c.fullscreen
		c:raise()
	end, { description = "toggle fullscreen", group = "awesome: client" }),

	awful.key({ modkey }, "q", function(c) c:kill() end, { description = "close", group = "awesome: client" }),

	awful.key({ modkey, "Control" }, "space", awful.client.floating.toggle, { description = "toggle floating", group = "awesome: client" }),

	awful.key({ modkey }, "Return", function(c) c:swap(awful.client.getmaster()) end, { description = "move to master", group = "awesome: client" }),
	awful.key({ modkey }, "KP_Enter", function(c) c:swap(awful.client.getmaster()) end, { description = "move to master (numpad)", group = "awesome: client" }),

	awful.key({ modkey }, "o", function(c) c:move_to_screen() end, { description = "move to screen", group = "awesome: client" }),

	awful.key({ modkey, "Shift" }, "t", function(c) c.ontop = not c.ontop end, { description = "toggle always on top", group = "awesome: client" }),

	awful.key({ modkey }, "f", function(c)
		c.maximized_horizontal = false
		c.maximized_vertical = false
		c.maximized = not c.maximized
		c:raise()
	end, { description = "toggle maximize", group = "awesome: client" })
)

-- TAG KEYS (1–9)
for i = 1, 9 do
	globalkeys = gears.table.join(
		globalkeys,

		-- View tag only.
		awful.key({ modkey }, "#" .. i + 9, function()
			local screen = awful.screen.focused()
			local tag = screen.tags[i]
			if tag then tag:view_only() end
		end, { description = "view tag #" .. i, group = "awesome: tag" }),

		-- Toggle tag display.
		awful.key({ modkey, "Control" }, "#" .. i + 9, function()
			local screen = awful.screen.focused()
			local tag = screen.tags[i]
			if tag then awful.tag.viewtoggle(tag) end
		end, { description = "toggle tag #" .. i, group = "awesome: tag" }),

		-- Move client to tag.
		awful.key({ modkey, "Shift" }, "#" .. i + 9, function()
			if client.focus then
				local tag = client.focus.screen.tags[i]
				if tag then client.focus:move_to_tag(tag) end
			end
		end, { description = "move focused client to tag #" .. i, group = "awesome: tag" }),

		-- Toggle tag on focused client.
		awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9, function()
			if client.focus then
				local tag = client.focus.screen.tags[i]
				if tag then client.focus:toggle_tag(tag) end
			end
		end, { description = "toggle focused client on tag #" .. i, group = "awesome: tag" })
	)
end

-- CLIENT MOUSE BUTTONS
clientbuttons = gears.table.join(
	awful.button({}, 1, function(c) c:emit_signal("request::activate", "mouse_click", { raise = true }) end),

	awful.button({ modkey }, 1, function(c)
		c:emit_signal("request::activate", "mouse_click", { raise = true })
		awful.mouse.client.move(c)
	end),

	awful.button({ modkey }, 3, function(c)
		c:emit_signal("request::activate", "mouse_click", { raise = true })
		awful.mouse.client.resize(c)
	end)
)

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
	-- All clients will match this rule.
	{
		rule = {},
		properties = {
			border_width = beautiful.border_width,
			border_color = beautiful.border_normal,
			focus = awful.client.focus.filter,
			raise = true,
			keys = clientkeys,
			buttons = clientbuttons,
			screen = awful.screen.preferred,
			placement = awful.placement.no_overlap + awful.placement.no_offscreen,
		},
	},

	-- Always floating and on top
	{
		rule_any = {
			class = { "SpeedCrunch" },
		},
		properties = { floating = true, ontop = true },
	},

	{
		rule_any = {
			class = { "openscad", "OpenSCAD" },
		},
		properties = { floating = false, ontop = false },
	},

	-- Floating clients
	{
		rule_any = {
			instance = {
				"copyq",
				"pinentry",
			},
			class = {
				"MessageWin",
				-- "orca-slicer",
				-- "OrcaSlicer",
				-- "soffice",
				-- "Soffice",
				-- "libreoffice",
				-- "libreoffice-calc",
				"synergy",
			},
			name = {
				"Event Tester",
			},
			role = {
				"AlarmWindow",
				"ConfigManager",
				"pop-up",
			},
		},
		properties = { floating = true },
	},

	-- Titlebars on normal and dialog windows
	{
		rule_any = { type = { "normal" } },
		properties = { titlebars_enabled = false },
	},

	{
		rule_any = { type = { "dialog" } },
		properties = { titlebars_enabled = true },
	},
	-- Game: Elder Scrolls Online
	{
		rule_any = {
			name = { "Elder Scrolls Online" },
			class = { "eso64.exe" },
		},
		properties = { ontop = true, fullscreen = true },
	},
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function(c)
	-- Set the windows at the slave,
	-- i.e. put it at the end of others instead of setting it master.
	if not awesome.startup then awful.client.setslave(c) end

	if awesome.startup and not c.size_hints.user_position and not c.size_hints.program_position then
		-- Prevent clients from being unreachable after screen count changes.
		awful.placement.no_offscreen(c)
	end
end)

-- Add a titlebar if titlebars_enabled is set to true in the rules.
client.connect_signal("request::titlebars", function(c)
	-- buttons for the titlebar
	local buttons = gears.table.join(
		awful.button({}, 1, function()
			c:emit_signal("request::activate", "titlebar", { raise = true })
			awful.mouse.client.move(c)
		end),
		awful.button({}, 3, function()
			c:emit_signal("request::activate", "titlebar", { raise = true })
			awful.mouse.client.resize(c)
		end)
	)

	awful.titlebar(c):setup({
		{ -- Left
			awful.titlebar.widget.iconwidget(c),
			buttons = buttons,
			layout = wibox.layout.fixed.horizontal,
		},
		{ -- Middle
			{ -- Title
				align = "center",
				widget = awful.titlebar.widget.titlewidget(c),
			},
			buttons = buttons,
			layout = wibox.layout.flex.horizontal,
		},
		{ -- Right
			awful.titlebar.widget.floatingbutton(c),
			awful.titlebar.widget.maximizedbutton(c),
			awful.titlebar.widget.stickybutton(c),
			awful.titlebar.widget.ontopbutton(c),
			awful.titlebar.widget.closebutton(c),
			layout = wibox.layout.fixed.horizontal(),
		},
		layout = wibox.layout.align.horizontal,
	})
end)

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c) c:emit_signal("request::activate", "mouse_enter", { raise = false }) end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}

awful.spawn.with_shell("~/.bin/autostart-xorg-global.sh") -- > ~/global.log 2>&1")
